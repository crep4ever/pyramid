/*
 * Copyright (C) 2008-2011, Romain Goffe <romain.goffe@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

namespace Map2d
{
  INLINE
  CArray::CArray(unsigned int xmin, unsigned int ymin, unsigned int width, unsigned int height) :
    m_xmin(xmin),
    m_ymin(ymin)
  {
    m_array = new CVolume< CDart* >(width+1, height+1, 2);
    m_array->fill();
  }

  INLINE
  CDart*  CArray::getDart(const CDoublet& ADoublet) const
  {
    if( ADoublet.isPos(ADoublet.getLinel()) )
      {
	if( ADoublet.isX(ADoublet.getLinel()) )
	  return m_array->getValue( ADoublet.getX() - m_xmin, ADoublet.getY() - m_ymin, 0 );
	else
	  return m_array->getValue( ADoublet.getX() - m_xmin, ADoublet.getY() - m_ymin, 1 );
      }
    else
      {
	if( ADoublet.isX(ADoublet.getLinel()) )
	  {
	    if(ADoublet.getX()<=0) return NULL;
	    CDart* tmp = m_array->getValue( ADoublet.getX()-1 - m_xmin, ADoublet.getY() - m_ymin, 0 );
	    if( tmp == NULL)
	      return NULL;
	    else
	      return tmp->getBeta2();
	  }
	else
	  {
	    if(ADoublet.getY()<=0) return NULL;
	    CDart* tmp = m_array->getValue( ADoublet.getX() - m_xmin, ADoublet.getY()-1 - m_ymin, 1 );
	    if( tmp == NULL)
	      return NULL;
	    else
	      return tmp->getBeta2();
	  }
      }
  }

  INLINE
  void CArray::setDart(CDart* ADart)
  {
    assert(ADart->getBeta2()!=NULL);
    CDoublet doublet = static_cast<CTopologicalDart*>(ADart)->doublet();

    if( doublet.isPos(doublet.getLinel()) )
      {
	if( doublet.isX(doublet.getLinel()) )
	  m_array->setValue(doublet.getX()-m_xmin, doublet.getY()-m_ymin, 0, ADart);
	else
	  m_array->setValue(doublet.getX()-m_xmin, doublet.getY()-m_ymin, 1, ADart);
      }
    else
      {
	if( doublet.isX(doublet.getLinel()) )
	  m_array->setValue(doublet.getX()-m_xmin-1, doublet.getY()-m_ymin, 0, ADart->getBeta2());
	else
	  m_array->setValue(doublet.getX()-m_xmin, doublet.getY()-m_ymin-1, 1, ADart->getBeta2());
      }
  }

} // namespace Map2d

