/*
 * Copyright (C) 2008-2011, Romain Goffe <romain.goffe@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//******************************************************************************
#include "imageTiff.hh"
#include "level.hh"
#include "tile.hh"
#include "point2d.hh"
#include "point3d.hh"
#include "pyramidal-dart.hh"
#include "coverage-region-pixels.hh"
#include <fstream>
#include <sys/stat.h>
#include <sys/types.h>

namespace Map2d
{
  //******************************************************************************
  //Accesseurs
  //******************************************************************************

  INLINE
  CImageTiff* CPyramid::image() const
  {
    return FImage;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setImage(CImageTiff* AImage)
  {
    assert( AImage!=NULL );
    FImage = AImage;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::nbPixels() const
  {
    return FNbPixels;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setNbPixels(uint ANbPixels)
  {
    FNbPixels = ANbPixels;
  }
  //------------------------------------------------------------------------------
  INLINE
  float CPyramid::deviation() const
  {
    return FDeviation;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setDeviation(float ADeviation)
  {
    FDeviation = ADeviation;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::tileWidth() const
  {
    return FTileWidth;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setTileWidth(uint ATileWidth)
  {
    if(ATileWidth>imageWidth(0))
      FTileWidth = imageWidth(0);
    else
      FTileWidth = ATileWidth;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::tileHeight() const
  {
    return FTileHeight;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setTileHeight(uint ATileHeight)
  {
    if(ATileHeight>imageHeight(0))
      FTileHeight = imageHeight(0);
    else
      FTileHeight = ATileHeight;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::nbLevels() const
  {
    return FNbLevels;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setNbLevels(uint ANbLevels)
  {
    FNbLevels = ANbLevels;
  }
  //------------------------------------------------------------------------------
  INLINE
  std::vector<uint> CPyramid::mergeThresholds() const
  {
    return FMergeThresholds;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setMergeThresholds(std::vector<uint> AMergeThresholds)
  {
    FMergeThresholds = AMergeThresholds;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::extractMode() const
  {
    return FExtractMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setExtractMode(const ExtractMode & AMode)
  {
    FExtractMode = AMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  std::deque<CLevel*> CPyramid::levels() const
  {
    return FLevels;
  }
  //------------------------------------------------------------------------------
  INLINE
  CLevel* CPyramid::level(uint ALevel) const
  {
    return levels()[ALevel];
  }


  //******************************************************************************
  // Méthodes sur l'image
  //******************************************************************************

  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::imageWidth(uint APage) const
  {
    assert( FImage!=NULL);
    return FImage->getXSize(APage);
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::imageHeight(uint APage) const
  {
    assert( FImage!=NULL);
    return FImage->getYSize(APage);
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::nbTilesWidth(uint APage) const
  {
    uint width = imageWidth(APage);
    uint truncated = (width%FTileWidth > 0)?1:0;
    return width/FTileWidth + truncated;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::nbTilesHeight(uint APage) const
  {
    uint height = imageHeight(APage);
    uint truncated = (height%FTileHeight > 0)?1:0;
    return height/FTileHeight + truncated;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CPyramid::ratios(uint ALevel) const
  {
    if(ALevel==0) return CPoint2D(1,1);
    return CPoint2D( imageWidth(ALevel)/imageWidth(0),
		     imageHeight(ALevel)/imageHeight(0) );
  }


  //******************************************************************************
  // Opérations sur les tuiles
  //******************************************************************************


  INLINE
  CTile* CPyramid::tile(const CPoint3D & APos)
  {
    return level(APos.z())->tile( CPoint2D(APos.x(),APos.y()) );
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::writeTile(const CPoint3D & APos)
  {
    //std::cout<<"pyr write tile "<<" ("<<APos.x()<<","<<APos.y()<<","<<APos.z()<<")"<<std::endl;
    level(APos.z())->writeTile( CPoint2D(APos.x(),APos.y()) );
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::unloadAllTiles()
  {
    for(uint i=0; i<nbLevels(); ++i)
      level(i)->unloadAllTiles();
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::loadAllTiles()
  {
    //std::cout<<"CPyramid::loadAllTiles :\n";
    //std::cout<<"\n Chargement de toutes les tuiles:\n";
    for(uint i=0; i<nbLevels(); ++i)
      level(i)->loadAllTiles();
    //std::cout<<std::endl;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::addTile(CTile* ATile, uint ALevel)
  {
    assert( ATile!=NULL );
    assert(ATile->index(2) == ALevel);
    level(ALevel)->addTile(ATile);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::linkTileUpDown(CTile* ATileUp, CTile* ATileDown)
  {
    assert( ATileUp!=NULL && ATileDown!=NULL);
    ATileUp->setTileDown(ATileDown);
    ATileDown->setTileUp(ATileUp);
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::xmax( CTile* ATile ) const
  {
    return ATile->xmax();
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::xmin( CTile* ATile ) const
  {
    return ATile->xmin();
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::ymax( CTile* ATile ) const
  {
    return ATile->ymax();
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::ymin( CTile* ATile ) const
  {
    return ATile->ymin();
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::tileWidth(CTile* ATile) const
  {
    return ATile->width();
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::tileHeight(CTile* ATile) const
  {
    return ATile->height();
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::segmentationMode() const
  {
    return FSegmentationMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setSegmentationMode(const SegmentationMode & AMode)
  {
    FSegmentationMode = AMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::projectionMode() const
  {
    return FProjectionMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setProjectionMode(const ProjectionMode & AMode)
  {
    FProjectionMode = AMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::focusAttentionMode() const
  {
    return FFocusAttentionMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setFocusAttentionMode(const FocusAttentionMode & AMode)
  {
    FFocusAttentionMode = AMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::detectFictiveBordersMode() const
  {
    return FDetectFictiveBordersMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramid::setDetectFictiveBordersMode(const DetectFictiveBordersMode & AMode)
  {
    FDetectFictiveBordersMode = AMode;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CPyramid::nbTiles() const
  {
    uint res = 0;
    for(uint i =0; i<nbLevels();++i)
      res += nbTilesWidth(i) * nbTilesHeight(i);
    return res;
  }

  //******************************************************************************
} // namespace Map2d
//******************************************************************************
