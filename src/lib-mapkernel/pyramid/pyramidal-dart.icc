/*
 * Copyright (C) 2008-2011, Romain Goffe <romain.goffe@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

namespace Map2d
{
  INLINE
  CPyramidalDart::~CPyramidalDart()
  {
    //std::cout<<"suppression pyramidal dart"<<std::endl;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart::CPyramidalDart() :
    CTopologicalDart  (),
    FId               ( static_cast<TDartId>(0) ),
    FDartUp	      (NULL),
    FDartDown         (NULL),
    FBeta2b           (NULL),
    FFictive          (false)
  {
    //std::cout<<"CPyramidal Dart : constructeur par dÃ©faut"<<std::endl;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart::CPyramidalDart(const CPyramidalDart & ADart) :
    CTopologicalDart  (ADart),
    FId               (ADart.FId),
    FDartUp           (ADart.FDartUp),
    FDartDown         (ADart.FDartDown),
    FBeta2b           (ADart.FBeta2b),
    FFictive          (ADart.FFictive)
  {
    std::cout<<"CPyramidal Dart : constructeur par recopie"<<std::endl;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart::CPyramidalDart(const CTopologicalDart & ADart) :
    CTopologicalDart(ADart),
    FId             ( static_cast<TDartId>(0) ),
    FDartUp	    (NULL),
    FDartDown	    (NULL),
    FBeta2b         (NULL),
    FFictive        (false)
  {
    std::cout<<"CPyramidal Dart : constructeur depuis un topologicalDart"<<std::endl;
  }
  //------------------------------------------------------------------------------
  /*
    INLINE
    CPyramidalDart::CPyramidalDart(const std::bitset<NB_MARKS> & AMarks) :
    CTopologicalDart  (AMarks),
    FId               ( static_cast<TDartId>(0) ),
    FDartUp           (NULL),
    FDartDown         (NULL)
    {
    std::cout<<"CPyramidal Dart : constructeur avec initialisation des marques"<<std::endl;
    }
  */
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart::CPyramidalDart(const CDoublet & ADoublet, CRegion* ARegion,
				 const std::bitset<NB_MARKS> & AMarks) :
    CTopologicalDart(),
    FId             ( static_cast<TDartId>(0) ),
    FDartUp	    (NULL),
    FDartDown 	    (NULL),
    FBeta2b         (NULL),
    FFictive        (false)
  {
    //std::cout<<"CPyramidal Dart : constructeur depuis doublet et marques"<<std::endl;
  }
  //******************************************************************************

  INLINE
  TDartId CPyramidalDart::getId() const
  { return FId; }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramidalDart::setId(TDartId AId){
    //assert(AId>0); -> 0 dans le destructeur
    FId=AId;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CPyramidalDart::getDartUp() const
  { return FDartUp; }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CPyramidalDart::up() const
  { return FDartUp; }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramidalDart::setDartUp(CPyramidalDart* ADart){
    FDartUp=ADart;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CPyramidalDart::getDartDown() const
  { return FDartDown; }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CPyramidalDart::down() const
  { return FDartDown; }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramidalDart::setDartDown(CPyramidalDart* ADart){
    FDartDown=ADart;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CPyramidalDart::getBeta2b() const
  { return FBeta2b; }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramidalDart::setBeta2b(CPyramidalDart* ADart){
    FBeta2b=ADart;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CPyramidalDart::isFictive() const
  { return FFictive; }
  //------------------------------------------------------------------------------
  INLINE
  void CPyramidalDart::setFictive(bool value){
    FFictive=value;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CPyramidalDart::getBeta0() const
  { return static_cast<CPyramidalDart*>(CTopologicalDart::getBeta0()); }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CPyramidalDart::getBeta1() const
  { return static_cast<CPyramidalDart*>(CTopologicalDart::getBeta1()); }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CPyramidalDart::getBeta2() const
  { return static_cast<CPyramidalDart*>(CTopologicalDart::getBeta2()); }
  //------------------------------------------------------------------------------
  INLINE
  bool CPyramidalDart::existDartUp()
  {
    return( FDartUp != NULL);
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CPyramidalDart::existDartDown()
  {
    return( FDartDown != NULL);
  }
  //  //------------------------------------------------------------------------------
  //  INLINE
  //  CDoublet& CPyramidalDart::getDoublet()
  //  {
  //    return this->doublet();
  //  }
  //  //------------------------------------------------------------------------------
  //  INLINE
  //  void CPyramidalDart::setDoublet(const CDoublet& ADoublet)
  //  {
  //    FDoublet = ADoublet;
  //  }

  //******************************************************************************
} // namespace Map2d
//******************************************************************************
