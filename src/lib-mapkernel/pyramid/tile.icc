/*
 * Copyright (C) 2008-2011, Romain Goffe <romain.goffe@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//******************************************************************************
#include <iostream>
#include <fstream>
#include <sstream>
#include <sys/stat.h> 
#include <stdio.h>
#include <string.h>
#include <map>
#include "traversal-region-pixels.hh"
namespace Map2d
{
  INLINE
  CTile::~CTile()
  {
    //std::cout<<"\n[start] CTile::destructeur() tile "<<getId()<<std::endl;
    removeAllRegions();    
    empty();
    delete FMark;
    FMark = NULL;
    FClassif = NULL;
    FProperties = NULL;
    FAssignment = NULL;
    //std::cout<<"\n[end] CTile::destructeur()"<<std::endl;
  }

  //******************************************************************************
  //Constructeurs
  //******************************************************************************
  INLINE
  CTile::CTile(uint AWidth, uint AHeight) :
    CTopologicalMap(512),
    FMergeThreshold(0),
    FCount(0),
    FRegionCount(0),
    FPixIndex(0),
    FMark(NULL),
    FId(0),
    FBottomRight(CPoint2D(0,0)),
    FWidth(AWidth),
    FHeight(AHeight),
    FTileUp(NULL),
    FTileDown(NULL),
    FProperties(NULL),
    FOldProperties(NULL),
    FMatrix(NULL),
    FDartFields(NULL),
    FOldDarts(NULL),
    FRegionFields(NULL),
    FOldRegions(NULL),
    FFirst(true),
    FFilename(""),
    FClassif(NULL),
    FAssignment(NULL)
  {
    //coordonnées de la tuile
    for(int i=0;i<3;++i)
      FIndex[i]=0;
  
    assert(getNbRegions()==0);
  }

  //******************************************************************************
  //Accesseurs
  //******************************************************************************

  INLINE
  uint CTile::id() const
  {
    return FId;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setId(uint AId)
  {
    FId = AId;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::bottomRight() const
  {
    return FBottomRight;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setBottomRight(const CPoint2D& ABottomRight)
  {
    FBottomRight = ABottomRight;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::width() const
  {
    return FWidth;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setWidth(uint AWidth)
  {
    assert(false);
    FWidth = AWidth;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::height() const
  {
    return FHeight;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setHeight(uint AHeight)
  {
    assert(false);
    FHeight = AHeight;
  }
  //------------------------------------------------------------------------------
  INLINE
  CTile* CTile::tileUp() const
  {
    return FTileUp;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setTileUp(CTile* ATile)
  {
    FTileUp = ATile;
  }
  //------------------------------------------------------------------------------
  INLINE
  CTile* CTile::tileDown() const
  {
    return FTileDown;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setTileDown(CTile* ATile)
  {
    FTileDown = ATile;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::mergeThreshold() const
  {
    return FMergeThreshold;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setMergeThreshold(uint AMergeThreshold)
  {
    FMergeThreshold = AMergeThreshold;
  }
  //------------------------------------------------------------------------------
  INLINE
  CImageTiff* CTile::image() const
  {
    return static_cast<CImageTiff*>(FImage);
  }

  //------------------------------------------------------------------------------
  INLINE
  void CTile::setImage(CImageTiff* AImage)
  {
    FImage = AImage;
  }
  //------------------------------------------------------------------------------
  INLINE
  CKhalimsky* CTile::getKhalimsky() const
  {
    return FKhalimsky;
  }
  //------------------------------------------------------------------------------
  INLINE
  CKhalimsky* CTile::khalimsky() const
  {
    return FKhalimsky;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setKhalimsky(CKhalimsky* AKhalimsky)
  {
    FKhalimsky = AKhalimsky;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalRegion* CTile::getInclusionTreeRoot() const
  { 
    assert(static_cast<CPyramidalRegion*>(FInclusionTreeRoot)->isInfiniteRegion());
    return static_cast<CPyramidalRegion*>(FInclusionTreeRoot);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setInclusionTreeRoot(CRegion* ARegion)
  {
    FInclusionTreeRoot = ARegion;
  }
  //------------------------------------------------------------------------------
  INLINE
  std::vector<CDart*> CTile::corners() const
  {
    return FCorners;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::addCorner(CDart* ADart)
  {
    assert( ADart!=NULL );
    FCorners.push_back(ADart);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setCorners(std::vector<CDart*>& ACorners)
  {
    assert( !ACorners.empty() );
    FCorners = ACorners;
  }
  //------------------------------------------------------------------------------
  INLINE
  std::map<TDartId, CPyramidalDart*> CTile::mapDarts() const
  {
    return FMapDarts;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setMapDarts(std::map<TDartId, CPyramidalDart*>& AMap)
  {
    FMapDarts = AMap;
  }
  //------------------------------------------------------------------------------
  INLINE
  std::map<TRegionId, CRegion*> CTile::mapRegions() const
  {
    return FMapRegions;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setMapRegions(std::map<TRegionId, CRegion*>& AMap)
  {
    FMapRegions = AMap;
  }
  //------------------------------------------------------------------------------
  INLINE
  std::map<TDartId, TDartId> CTile::mapBeta2() const
  {
    return FMapBeta2;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setMapBeta2(std::map<TDartId, TDartId>& AMap)
  {
    FMapBeta2 = AMap;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::index(uint APos) const
  {
    return FIndex[APos];
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setIndex(uint APos, uint AValue)
  {
    assert(APos<3);
    FIndex[APos] = AValue;
  }

  //******************************************************************************	  
  // Méthodes utilitaires
  //******************************************************************************       

  INLINE
  void CTile::setFilename(uint Ai, uint Aj, uint Ak)
  {
    std::ostringstream filename;
    filename<<".//output//tile-"<<Ai<<"-"<<Aj<<"-"<<Ak;
    FFilename =  filename.str();
  }
  //------------------------------------------------------------------------------  
  INLINE
  bool CTile::fileExist(const char* AFilename)
  {
    struct stat s;
    return (stat(AFilename, &s) == 0);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::loadImage()
  {
    assert(image()!=NULL);  assert(image()->isOpen);
    image()->read(boundingBox(), index(2));
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::xmin(const SystemMode & ASystem) const
  {
    assert( FWidth!=0 );
    return (ASystem==Absolute) ? bottomRight().getX() - FWidth : 0;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::xmax(const SystemMode & ASystem) const
  {
    return (ASystem==Absolute) ? bottomRight().getX() : width();
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::ymin(const SystemMode & ASystem) const
  {
    assert( FHeight!=0);
    return (ASystem==Absolute)? bottomRight().getY() - FHeight : 0;
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::ymax(const SystemMode & ASystem) const
  {
    return (ASystem==Absolute) ? bottomRight().getY() : height();
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::bottomLeft() const
  {
    return CPoint2D( xmin(),ymax() );
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::topLeft() const
  {
    return CPoint2D( xmin(),ymin() );
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::topRight() const
  {
    return CPoint2D( xmax(),ymin() );
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::downRatioX() const
  {
    assert(( image()->getXSize(index(2)+1) ) / ( image()->getXSize( index(2) ) ) != 0 );
    return ( image()->getXSize(index(2)+1) ) / ( image()->getXSize( index(2) ) );
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::downRatioY() const
  {
    assert(( image()->getYSize(index(2)+1) ) / ( image()->getYSize( index(2) ) ) != 0);
    return ( image()->getYSize(index(2)+1) ) / ( image()->getYSize( index(2) ) );
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::downRatio() const
  {
    return CPoint2D(downRatioX(), downRatioY());
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::upRatioX() const
  {
    assert(( image()->getXSize(index(2)) ) / ( image()->getXSize( index(2)-1 ) ) != 0);
    return ( image()->getXSize(index(2)) ) / ( image()->getXSize( index(2)-1 ) );
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::upRatioY() const
  {
    assert(( image()->getYSize(index(2)) ) / ( image()->getYSize( index(2)-1 ) ) != 0);
    return ( image()->getYSize(index(2)) ) / ( image()->getYSize( index(2)-1 ) );
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::upRatio() const
  {
    return CPoint2D(upRatioX(), upRatioY());
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::linkTileUpDown(CTile* ATileUp, CTile* ATileDown)
  {
    assert( ATileUp!=NULL && ATileDown!=NULL);
    ATileDown->setTileUp(ATileUp);
    ATileUp->setTileDown(ATileDown);
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::existTileUp() const
  {
    return(FTileUp != NULL);
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::existTileDown() const
  {
    return(FTileDown != NULL);
  }
  //------------------------------------------------------------------------------
  INLINE
  IM_Box CTile::boundingBox(const SystemMode & ASystem)
  {
    IM_Box ABox;
    ABox.XTop = xmin(ASystem); ABox.YTop = ymin(ASystem);
    ABox.XBtm = xmax(ASystem); ABox.YBtm = ymax(ASystem);
    return ABox;
  }  
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isPointelInTile(const CDoublet & ADoublet, bool AStrict, const SystemMode & ASystem) const
  {
    if(AStrict)
      return 
	ADoublet.getX()>xmin(ASystem) && ADoublet.getY()>ymin(ASystem) && 
	ADoublet.getX()<xmax(ASystem) && ADoublet.getY()<ymax(ASystem) ;
    else
      return 
	ADoublet.getX()>=xmin(ASystem) && ADoublet.getY()>=ymin(ASystem) && 
	ADoublet.getX()<=xmax(ASystem) && ADoublet.getY()<=ymax(ASystem) ;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isDoubletInTile(const CDoublet & ADoublet, bool AStrict, const SystemMode & ASystem) const
  {
    if(ADoublet.getX()<xmin(ASystem) || ADoublet.getX()>xmax(ASystem) ||
       ADoublet.getY()<ymin(ASystem) || ADoublet.getY()>ymax(ASystem))
      return false;

    if(AStrict)
      {
	if(isPointelInTile(ADoublet,true,ASystem))
	  return true;
	if(isLinelOnBorder(ADoublet, ASystem))
	  return false;
	if(ADoublet.getX()==xmin(ASystem))
	    return ADoublet.getLinel()==XPOS;
	else if(ADoublet.getX()==xmax(ASystem))
	  return ADoublet.getLinel()==XNEG;
	else if(ADoublet.getY()==ymin(ASystem))
	  return ADoublet.getLinel()==YPOS;
	else if(ADoublet.getY()==ymax(ASystem))
	  return ADoublet.getLinel()==YNEG;
      }
    
    return isPointelInTile(ADoublet, true, ASystem) || isLinelOnBorder(ADoublet, ASystem);
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isPixelInTile(uint x, uint y, const SystemMode & ASystem) const
  {
    return x>=xmin(ASystem) && y>=ymin(ASystem) && x<=xmax(ASystem) && y<=ymax(ASystem) ;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isPixelOnBorder(uint x, uint y, const SystemMode & ASystem) const
  {
    return x==xmin(ASystem) || y==ymin(ASystem) || x==xmax(ASystem) || y==ymax(ASystem) ;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isPointelOnBorder(const CDoublet & ADoublet, const SystemMode & ASystem) const
  {
    if(ADoublet.getX()<xmin(ASystem) || ADoublet.getX()>xmax(ASystem) ||
       ADoublet.getY()<ymin(ASystem) || ADoublet.getY()>ymax(ASystem))
      return false;

    return 
      ADoublet.getX()==xmin(ASystem) || ADoublet.getX()==xmax(ASystem) ||
      ADoublet.getY()==ymin(ASystem) || ADoublet.getY()==ymax(ASystem) ;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isPointelACorner(const CDoublet & ADoublet, const SystemMode & ASystem) const
  {
    return 
      (ADoublet.getX()==xmin(ASystem) || ADoublet.getX()==xmax(ASystem)) &&
      (ADoublet.getY()==ymin(ASystem) || ADoublet.getY()==ymax(ASystem)) ;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isLinelOnBorder(const CDoublet & ADoublet, const SystemMode & ASystem) const
  {
    if( !isPointelOnBorder(ADoublet, ASystem) )
      return false;

    //Cas des 4 coins
    if(ADoublet.getX()==xmin(ASystem) && ADoublet.getY()==ymin(ASystem))
	return ADoublet.isPos(ADoublet.getLinel());

    if(ADoublet.getX()==xmax(ASystem) && ADoublet.getY()==ymax(ASystem))
      return ADoublet.isNeg(ADoublet.getLinel());

    if(ADoublet.getX()==xmin(ASystem) && ADoublet.getY()==ymax(ASystem))
      return ADoublet.getLinel()==XPOS || ADoublet.getLinel()==YNEG;
      
    if(ADoublet.getX()==xmax(ASystem) && ADoublet.getY()==ymin(ASystem))
      return ADoublet.getLinel()==XNEG || ADoublet.getLinel()==YPOS;
    
    //Cas du pointel sur le bord (coins exclus)	  
    if(ADoublet.getX()==xmin(ASystem) || ADoublet.getX()==xmax(ASystem))
	return ADoublet.isY(ADoublet.getLinel());
    
    if(ADoublet.getY()==ymin(ASystem) || ADoublet.getY()==ymax(ASystem))
	return ADoublet.isX(ADoublet.getLinel());
    
    assert(false); return false;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::incidentPixelsForLinel(const CDoublet & ADoublet, 
				     IM_Pixel& pix1, IM_Pixel& pix2, 
				     const SystemMode & ASystemMode)
  {
    assert(!isLinelOnBorder(ADoublet, ASystemMode));
    CDoublet doublet(ADoublet);

    if(doublet.isNeg(doublet.getLinel())) 
      doublet = doublet.getNextPointel();

    pix1.x = doublet.getX(); 
    pix1.y = doublet.getY();
    
    if(doublet.isX(doublet.getLinel()))
      {
	pix2.x = doublet.getX(); 
	pix2.y = doublet.getY()-1;
      }
    else
      {
	pix2.x = doublet.getX()-1; 
	pix2.y = doublet.getY();
      }
  }

  //------------------------------------------------------------------------------
  INLINE
  uint CTile::gradient(const CDoublet & ADoublet, const SystemMode & ASystem)
  {
    //std::cout<<"[start] CTile::gradient on linel "<<ADoublet<<std::endl;  
    if(isLinelOnBorder(ADoublet, ASystem))
      return 255;
    
    IM_Pixel pix1, pix2;
    incidentPixelsForLinel(ADoublet, pix1, pix2, ASystem);
    
    image()->getPixel( pix1, index(2) );
    image()->getPixel( pix2, index(2) );
    
    //cout<<"[end] CTile::gradient = "<<abs(image()->getPixelGreyValue(pix1)-image()->getPixelGreyValue(pix2))<<endl;
    return (uint) abs(image()->getPixelGreyValue(pix1) - image()->getPixelGreyValue(pix2));
  }

  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::coordinateInParent(uint x, uint y, const SystemMode & ASystem) const
  {
    return (ASystem==Relative) ?
      CPoint2D( (x+xmin())/upRatioX() - tileUp()->xmin(), (y+ymin())/upRatioY() - tileUp()->ymin() ):
      CPoint2D( x/upRatioX() - tileUp()->xmin(), y/upRatioY() - tileUp()->ymin() );
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::coordinateInParent(const CPoint2D& APoint, const SystemMode & ASystem) const
  {
    return coordinateInParent(APoint.x(), APoint.y(), ASystem);
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::coordinateFromParent(uint x, uint y, SystemMode ASystem) const
  {
    return (ASystem==Relative) ?
      CPoint2D( ((x+tileUp()->xmin())*upRatioX() - xmin()), ((y+tileUp()->ymin())*upRatioY() - ymin()) ):
      CPoint2D( (x*upRatioX() - xmin()), (y*upRatioY() - ymin()) );
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::coordinateFromParent(const CPoint2D& APoint, SystemMode ASystem) const
  {
    return coordinateFromParent(APoint.x(), APoint.y(), ASystem);
  }
  //------------------------------------------------------------------------------
  INLINE
  CPoint2D CTile::coordinateFromParent(const CDoublet& ADoublet, SystemMode ASystem) const
  {
    return coordinateFromParent(ADoublet.getX(), ADoublet.getY(), ASystem);
  }

  //******************************************************************************	  
  // Méthodes sur la carte
  //******************************************************************************       

  //------------------------------------------------------------------------------
  INLINE
  void CTile::emptyMap()
  {
    //removeAllDarts();
    removeAllRegions();    
    empty();
    assert( getNbRegions() == 0 && getNbDarts() == 0 );
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::empty()
  {
    CTopologicalMap::empty();
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::removeAllRegions()
  {
    assert(getInclusionTreeRoot()->existSon());
    delRegion(getInclusionTreeRoot());
    setInclusionTreeRoot(NULL);
    assert(getNbRegions() == 0);
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isDartOnBorder(CTopologicalDart* ADart, int AMethod)
  {
    if(AMethod==0)
      return getRegion(beta2(ADart))->isInfiniteRegion() || 
	getRegion(ADart)->isInfiniteRegion();    
    const uint x = ADart->doublet().getX(); 
    const uint y = ADart->doublet().getY();
    return (x == 0 || x == width() || y == 0 || y == height());
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::splitBorder()
  {
    CDart* rep = getInclusionTreeRoot()->getRepresentativeDart();
    for(CDynamicCoverage1 it(this, rep); it.cont(); ++it)
      splitEdge(beta2(*it));
  }
  //------------------------------------------------------------------------------
  INLINE
  unsigned long int CTile::getMemoryForMap() const
  { 
    //std::cout<<"size of CTile : "<<sizeof(CTile)<<std::endl;
    //std::cout<<"size of CPyramidalDart : "<<sizeof(CPyramidalDart)<<std::endl;
    //std::cout<<"nombre de brins : "<<getNbDarts()<<std::endl;
    return sizeof(CTile)+getNbDarts()*sizeof(CPyramidalDart);
  }
  //------------------------------------------------------------------------------
  INLINE
  unsigned long int CTile::getMemoryForInclusionTree() const
  {
    assert( FInclusionTreeRoot!=NULL );
    //std::cout<<"size of CPyramidalRegion : "<<sizeof(CPyramidalRegion)<<std::endl;
    //std::cout<<"nombre de régions : "<<getNbRegions()<<std::endl;
    return getNbRegions()*sizeof(CPyramidalRegion)+sizeof(CInfinitePyramidalRegion);
  }

  

  //******************************************************************************	  
  //Opérations sur les pixels et leurs marques
  //******************************************************************************   	

  //------------------------------------------------------------------------------
  INLINE
  void CTile::setPixelMark()
  {
    assert(FMark==NULL);
    assert(width()!=0 && height()!=0);
    FMark = new CMatrix< bool >( width(), height() );
  }
  //------------------------------------------------------------------------------
  INLINE
  TRegionId CTile::getPixel(uint x, uint y) const
  {
    assert(false);
    assert( FImage!=NULL );
    //image()->getPixelGreyValue(image()->getPixel(x,y));
    return 0;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool  CTile::isPixelMarked(uint Ax, uint Ay) const
  {
    return FMark->getValue(Ax, Ay);
  }
  //------------------------------------------------------------------------------
  INLINE
  void  CTile::setPixelMark(uint Ax, uint Ay, bool AOn)
  {
    FMark->setValue(Ax, Ay, AOn);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile:: markPixel(uint Ax, uint Ay)
  {
    FMark->setValue(Ax, Ay, true);
  }
  //------------------------------------------------------------------------------
  INLINE
  void  CTile::unmarkPixel(uint Ax, uint Ay)
  {
    FMark->setValue(Ax, Ay, false);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile:: unmarkAllPixels()
  {
    FMark->fill();
  }

  //******************************************************************************	  
  //Opérations sur les brins
  //******************************************************************************   	

  INLINE
  CDart* CTile::addMapDart()
  {
    CPyramidalDart* result = static_cast<CPyramidalDart*>(CMapBasic::addMapDart());
    result->setId(++FCount);
    result->setDartUp(NULL);    
    result->setDartDown(NULL);
    return result;
  }
  //------------------------------------------------------------------------------
  INLINE
  CDart* CTile::getDart(uint Ai, uint Aj) const
  {
    // Il est nécessaire de caster en CPyramidalDart* pour que l'arithmétique
    // sur les pointeurs soit correcte, et il est nécessaire de re-caster en
    // CDart* (de manière implicite) pour que la signature de la fonction soit
    // la même que dans la classe CMapBasic.
    return (static_cast<CPyramidalDart*>(FTabsDarts[Ai]) + Aj);
  }
  //------------------------------------------------------------------------------
  INLINE
  CDart* CTile::newTabDarts()
  { 
    return new CPyramidalDart[FSizeDartArray];
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::deleteTabDarts(CDart* ATabDart)
  {
    assert( ATabDart!=NULL );
    delete [](static_cast<CPyramidalDart*>(ATabDart));
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::copyDart(CDart* ADartDest, CDart* ADartSrc)
  {
    assert(ADartDest != NULL && ADartSrc != NULL);
    static_cast<CPyramidalDart*>(ADartDest)->
      copy(static_cast<CPyramidalDart*>(ADartSrc));
  }
  //------------------------------------------------------------------------------
  INLINE
  CTopologicalDart* CTile::addMapDart(const CDoublet & ADoublet, CRegion* ARegion)
  {
    assert( FKhalimsky!=NULL );
    CPyramidalDart* result = static_cast<CPyramidalDart*>
      (CTopologicalMap::addMapDart(ADoublet, ARegion));
    ++FCount;
    result->setId(FCount);
    result->setDartUp(NULL);    
    result->setDartDown(NULL);
    return result;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CTile::getDartUp(CDart* ADart) const
  { 
    assert( ADart!=NULL );
    return static_cast<CPyramidalDart*>(ADart)->getDartUp();
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setDartUp(CDart* ADart, CDart* ADartUp)
  {
    assert( ADart!=NULL && ADartUp!=NULL );
    static_cast<CPyramidalDart*>(ADart)->setDartUp(static_cast<CPyramidalDart*>(ADartUp));
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalDart* CTile::getDartDown(CDart* ADart) const
  {
    assert( ADart!=NULL );
    return static_cast<CPyramidalDart*>(ADart)->getDartDown();
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setDartDown(CDart* ADart, CDart* ADartDown)
  {
    assert( ADart!=NULL && ADartDown!=NULL);
    static_cast<CPyramidalDart*>(ADart)->setDartDown(static_cast<CPyramidalDart*>(ADartDown)); 
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::linkDartUpDown(CDart* ADartUp, CDart* ADartDown)
  {
    assert( ADartUp!=NULL && ADartDown!=NULL);
    setDartUp(ADartDown, ADartUp);
    setDartDown(ADartUp, ADartDown);
  }
  //------------------------------------------------------------------------------
  INLINE
  CDoublet& CTile::doublet(CDart* ADart) const
  {
    assert( ADart!=NULL );
    return static_cast<CTopologicalDart*>(ADart)->doublet();
  }
  //------------------------------------------------------------------------------
  INLINE
  CDoublet& CTile::getDoublet(CDart* ADart) const
  {
    return doublet(ADart);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setDoublet(CDart* ADart, const CDoublet& ADoublet)
  {
    assert( ADart!=NULL );
    static_cast<CTopologicalDart*>(ADart)->setDoublet(ADoublet);
  }
  

  //******************************************************************************	  
  //Opérations sur les régions
  //******************************************************************************   	

  //------------------------------------------------------------------------------
  INLINE
  CDart* CTile::insertVertexOnEdge( CDart* ADart )
  {
    CDoublet t2 = getDoublet(ADart).getNextPointel();
    CDoublet t1 = getOtherLinel(t2);
    return insertVertexOnEdge(ADart, t1, t2);
  }
  //------------------------------------------------------------------------------
  INLINE
  CDart* CTile::insertVertexOnEdge( CDart* ADart, const CDoublet& ADoublet )
  {
    return insertVertexOnEdge(ADart, ADoublet, getOtherLinel(ADoublet));
  }
  //------------------------------------------------------------------------------

  INLINE
  CRegion* CTile::newRegion()
  {
    assert(false);
    return new CPyramidalRegion(++FNbRegions);
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalRegion* CTile::getRegion(CDart* ADart) const
  { 
    return static_cast<CPyramidalRegion*>(static_cast<CPyramidalDart*>(ADart)->getRegion());
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalRegion* CTile::getRegionUp(CRegion* ARegion) const
  { 
    assert( ARegion!=NULL );
    return static_cast<CPyramidalRegion*>(ARegion)->getRegionUp();
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setRegionUp(CRegion* ARegion, CRegion* ARegionUp)
  {
    assert( ARegion!=NULL && ARegionUp!=NULL );
    static_cast<CPyramidalRegion*>(ARegion)->setRegionUp(static_cast<CPyramidalRegion*>(ARegionUp));
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalRegion* CTile::getRegionDown(CRegion* ARegion) const
  { 
    assert( ARegion!=NULL );
    return static_cast<CPyramidalRegion*>(ARegion)->getRegionDown();
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setRegionDown(CRegion* ARegion, CRegion* ARegionDown)
  {
    assert( ARegion!=NULL && ARegionDown!=NULL);
    static_cast<CPyramidalRegion*>(ARegion)->setRegionDown(static_cast<CPyramidalRegion*>(ARegionDown)); 
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::linkRegionUpDown(CRegion* ARegionUp, CRegion* ARegionDown)
  {
    assert(ARegionUp != NULL && ARegionDown != NULL);
    setRegionUp(ARegionDown, ARegionUp);
    setRegionDown(ARegionUp, ARegionDown);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setNbRegions(uint ANbRegions)
  {
    FNbRegions = ANbRegions;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setNbDarts(uint ANbDarts)
  {
    FNbDarts = ANbDarts;
  }
  //------------------------------------------------------------------------------
  INLINE
  CInfinitePyramidalRegion* CTile::addMapInfiniteRegion()
  {
    assert(FInclusionTreeRoot == NULL );
    ++FNbRegions; 
    CInfinitePyramidalRegion* result = new CInfinitePyramidalRegion();
    result->setId(++FRegionCount);
    return result;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalRegion* CTile::addMapRegion()
  {
    ++FNbRegions;
    CPyramidalRegion* result = new CPyramidalRegion();
    result->setId(++FRegionCount);
    return result;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalRegion* CTile::addMapRegion(CRegion* ARegion)
  {
    assert( ARegion!=NULL );
    ++FNbRegions;
    CPyramidalRegion* result = new CPyramidalRegion(*static_cast<CPyramidalRegion*>(ARegion));
    result->setId(++FRegionCount);
    return result;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::addPixel( IM_Pixel & APixel, CRegion* ARegion)
  { 
    image()->getPixel( APixel, index(2));
    ARegion->addPixel( image()->getPixelGreyValue(APixel) & 0xFF ); // Le & 0xFF fait un modulo 256
  }
  //  //------------------------------------------------------------------------------
  //  INLINE
  //  void CTile::addPixel2(uint8* data, CRegion* ARegion)
  //  { 
  //    if( image()->colorMode() == CImageTiff::RGB )
  //      ARegion->addPixel( (data[FPixIndex++] + data[FPixIndex++] + data[FPixIndex++])/3 );
  //    else if(image()->colorMode() == CImageTiff::Grey)
  //      ARegion->addPixel( data[FPixIndex++] );
  //  }

  //******************************************************************************	  
  //Opérations sur la géométrie
  //******************************************************************************

  INLINE
  void CTile::setPCell(const CDoublet& ADoublet, bool ABool)
  {
    FKhalimsky->setPCell(ADoublet, ABool);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::setLCell(const CDoublet& ADoublet, bool ABool)
  {
    FKhalimsky->setLCell(ADoublet, ABool);
  }
  //------------------------------------------------------------------------------
  INLINE
  uint CTile::depth() const
  {
    return index(2);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CTile::assignClassifLabelsToRegions(const FocusAttentionMode & AFocusAttentionMode)
  {
    //std::cout<< "[start] Assign labels to regions at level" << depth() << std::endl;
    uint value;
    IM_Pixel pix;
    for( CDynamicCoverageAllRegions it( this ); it.cont(); ++it )
      {
	CPyramidalRegion* region = static_cast<CPyramidalRegion*>(*it);

	if(region->isInfiniteRegion()) 
	  {
	    region->setLabel(CPyramidalRegion::Invalid);
	  }
	else if(tileUp()->isRegionToSplit(region->regionUp(), AFocusAttentionMode))
	  {
	    CPoint2D pixel = region->getFirstPixel() ;
	    //pour la classif sur tout le niveau
	    //uint pos2 = ( (pixel.x()+xmin() ) + (image()->getXSize(depth()))*(pixel.y()+ymin()) ) * 3 ;
	    uint pos2 = ( (pixel.x()+xmin() ) + (image()->getXSize(depth()))*(pixel.y()+ymin()) ) ;

	    switch(AFocusAttentionMode)
	      {
	      case FocusHisto:
		if(depth()==1)
		  {
		    if(!FClassif) return;
		    value = FClassif[pos2];
		    region->setLabel(intToLabel(value));
		  }
		else
		  {
		    if(!FAssignment) return;
		    pix.x = pixel.x()+xmin();
		    pix.y = pixel.y()+ymin();
		    image()->getPixel( pix, depth() );
		    value = (*FAssignment)( pix.value[0], pix.value[1], pix.value[2]);
		    region->setLabel(intToLabel(value));
		    //std::cout<<"value = " << value << std::endl;
		  }
		break;
		
	      default:
		if(region->regionUp()->regionDown()==region)
		  region->setLabel( (CPyramidalRegion::Label) (region->regionUp()->label()+2) );
		else if(FClassif)
		  region->setLabel( (CPyramidalRegion::Label)FClassif[pos2] );
		break;
	      }
	  }
      }
    //std::cout<< "[end] Assign labels to regions at level" << std::endl;
  }
  //------------------------------------------------------------------------------
  INLINE
  CPyramidalRegion::Label CTile::intToLabel(const uint label)
  {
    //std::cout<<"intToLabel "<<label << " at depth " << depth()<<std::endl;
    switch(depth())
      {
      case 1:
	if(label==1)
	  return CPyramidalRegion::Tissue;
	return CPyramidalRegion::Background;

      case 2:
	if(label==1)
	  return CPyramidalRegion::DarkTissue;
	return CPyramidalRegion::BrightTissue;
	
      case 3:
	if(label==1)
	  return CPyramidalRegion::Lesion;
	return CPyramidalRegion::Tissue;

	//      case 4:
	//	if(label==1)
	//	  return CPyramidalRegion::Stroma;
	//	if(label==2)
	//	  return CPyramidalRegion::Cancer;
	//	return CPyramidalRegion::Stroma;
	
      case 4:
	if(label==1)
	  return CPyramidalRegion::Mitosis;
	return CPyramidalRegion::InSitu;

      default:
	//std::cout<<"CTile::intToLabel warning label "<<label<<" is not supported at depth "<<depth()<<std::endl;
	return CPyramidalRegion::Invalid;
      }
  }

  //------------------------------------------------------------------------------
  INLINE
  void CTile::histogram(CImg<float>* histo)
  {
    IM_Pixel pix;
    uint ratiox = downRatioX();
    uint ratioy = downRatioY();

    for( CDynamicCoverageAllRegions it(this); it.cont(); ++it )
      if(isRegionToSplit(*it, FocusHisto))
	{
	  CPyramidalRegion* region = static_cast<CPyramidalRegion*>(*it);
	  for( CTraversalRegionPixels it2(this, region); it2.cont(); ++it2)
	    for(uint j=0; j<ratioy; ++j)
	      for(uint i=0; i<ratiox; ++i)
		{
		  pix.x = ((*it2).x() + xmin())*ratiox + i;  
		  pix.y = ((*it2).y() + ymin())*ratioy + j;
		  image()->getPixel(pix, depth()+1);
		  (*histo)(pix.value[0], pix.value[1], pix.value[2])++;
		}
	}
  }
  
  //------------------------------------------------------------------------------
  INLINE
  uint8* CTile::regionsData()
  {
    IM_Pixel pix;
    uint ratiox = downRatioX();
    uint ratioy = downRatioY();
    uint size = width()*ratiox*height()*ratioy*3;
    uint8* data = new uint8[size];
    bzero(data, size*sizeof(uint8));

    //IM_Box box;
    //box.XTop = xmin()*ratiox;  box.YTop = ymin()*ratioy;
    //box.XBtm = xmax()*ratiox;  box.YBtm = ymax()*ratioy;
    //image()->read(box, depth()+1);
    //image()->regularization(box, depth()+1, 20, 2, 0, 1);

    for( CDynamicCoverageAllRegions it(this); it.cont(); ++it )
      if(isRegionToSplit(*it, FocusHisto))
	{
	  //std::cout<<" region to split" << std::endl;
	  CPyramidalRegion* region = static_cast<CPyramidalRegion*>(*it);
	  for( CTraversalRegionPixels it2(this, region); it2.cont(); ++it2)
	    for(uint j=0; j<ratioy; ++j)
	      for(uint i=0; i<ratiox; ++i)
		{
		  pix.x = ((*it2).x() + xmin())*ratiox + i;  
		  pix.y = ((*it2).y() + ymin())*ratioy + j;
		  image()->getPixel(pix, depth()+1);
		  //std::cout<<" pix ("<<(uint)pix.value[0]<<","<<(uint)pix.value[1]<<","<<(uint)pix.value[2]<<")"<<std::endl;
		  uint pos = ((*it2).x()*ratiox+i + (width()*ratiox)*((*it2).y()*ratioy+j))*3;
		  data[pos]   = pix.value[0];
		  data[pos+1] = pix.value[1];
		  data[pos+2] = pix.value[2];
		}
	}
    return data;
  }
  
  
  //******************************************************************************
} // namespace Map2d
//******************************************************************************
