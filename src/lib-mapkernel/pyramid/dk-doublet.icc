/*
 * Copyright (C) 2008-2011, Romain Goffe <romain.goffe@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//******************************************************************************
#include <limits>
//******************************************************************************
  INLINE
  CDkDoublet::~CDkDoublet()
  {}
  //------------------------------------------------------------------------------
  INLINE
  CDkDoublet::CDkDoublet() :
    CDoublet(),
    FWeight(std::numeric_limits<float>::max()),
    FPrev(NULL)
  {}
  //------------------------------------------------------------------------------
  INLINE
  CDkDoublet::CDkDoublet(const CDkDoublet & ADkDoublet) :
    CDoublet(ADkDoublet),
    FWeight(ADkDoublet.FWeight),
    FPrev(ADkDoublet.FPrev)
  {}
  //------------------------------------------------------------------------------
  INLINE
  CDkDoublet::CDkDoublet(const CDoublet & ADoublet) :
    CDoublet(ADoublet),
    FWeight(std::numeric_limits<float>::max()),
    FPrev(NULL)
  {}
  //------------------------------------------------------------------------------
  INLINE
  float CDkDoublet::weight() const
  {
    return FWeight;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CDkDoublet::updateWeight(float AValue, Heap<CDkDoublet*> & AHeap)
  {
    setWeight(AValue);
    AHeap.modify(this);
  }
  //------------------------------------------------------------------------------
  INLINE
  void CDkDoublet::setWeight(float AWeight)
  {
    FWeight = AWeight;
  }
  //------------------------------------------------------------------------------
  INLINE
  CDkDoublet* CDkDoublet::prev() const
  {
    return FPrev;
  }
  //------------------------------------------------------------------------------
  INLINE
  void CDkDoublet::setPrev(CDkDoublet* ADkDoublet)
  {
    FPrev = ADkDoublet;
  }
  //------------------------------------------------------------------------------
  INLINE
  CDkDoublet& CDkDoublet::operator = (const CDkDoublet& ADkDoublet)
  {
    Fx = ADkDoublet.Fx;
    Fy = ADkDoublet.Fy;
    FL = ADkDoublet.FL;
    setWeight(ADkDoublet.weight());
    setPrev(ADkDoublet.prev());
    return *this;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CDkDoublet::operator == (const CDkDoublet & ADkDoublet) const
  {
    return ( Fx == ADkDoublet.Fx 
	     && Fy == ADkDoublet.Fy 
	     && FL == ADkDoublet.FL
	     && weight() == ADkDoublet.weight() 
	     && prev() == ADkDoublet.prev() );
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CDkDoublet::operator != (const CDkDoublet & ADkDoublet) const
  { return ! operator==(ADkDoublet); }
  //------------------------------------------------------------------------------
  INLINE
  bool CDkDoublet::operator < (const CDkDoublet & ADkDoublet) const
  {
    return ( weight() < ADkDoublet.weight() );
  }
  //------------------------------------------------------------------------------
  INLINE
  std::ostream & operator<<(std::ostream & AStream,
					const CDkDoublet&  ADkDoublet)
  {
    AStream << "[ ("
	    << ADkDoublet.getX() << ", "
	    << ADkDoublet.getY() << ") ";
    
    switch (ADkDoublet.getLinel())
      {
      case XPOS: AStream<<"XPOS "; break;
      case YPOS: AStream<<"YPOS "; break;
      case XNEG: AStream<<"XNEG "; break;
      case YNEG: AStream<<"YNEG "; break;
      }

    AStream<<" Weight = "<<ADkDoublet.weight();
    if(ADkDoublet.prev())
      AStream<<" Prev = "<<*static_cast<CDoublet*>(ADkDoublet.prev());
    else
      AStream<<" Prev = NULL";
    
    return AStream<<"]";
  }
//******************************************************************************
