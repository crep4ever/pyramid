/*
 * lib-mapkernel : Un noyau de 2-cartes et des opÃ©rations.
 * Copyright (C) Moka Team, guillaume.damiand@liris.cnrs.fr
 *
 * This file is part of lib-mapkernel
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//******************************************************************************
#include "topological-map.hh"
#include "dart.hh"
//******************************************************************************
namespace Map2d
{
//******************************************************************************
INLINE
CCoverageEdgeLinels::CCoverageEdgeLinels( CTopologicalMap * AMap,
					  const CDoublet & ADoublet )
  : FMap( AMap )
  , lFirst( ADoublet )
  , lCur( lFirst )
  , FStop( false )
  , FMove( 0 )
{
  assert( FMap->isLCell( lFirst ) );
}
//******************************************************************************
INLINE
CCoverageEdgeLinels::CCoverageEdgeLinels( CTopologicalMap * AMap,
					  CDart * ADart )
  : FMap( AMap )
  , lFirst( AMap->getDoublet( ADart ) )
  , lCur( lFirst )
  , FStop( false )
  , FMove( 0 )
{
  assert( FMap->isLCell( lFirst ) );
}
//******************************************************************************
INLINE
CCoverageEdgeLinels::~CCoverageEdgeLinels()
{}
//******************************************************************************
INLINE
void CCoverageEdgeLinels::operator++()
{
  assert( cont() );
  assert( FMap->isLCell( lCur ) );

  FMove = 0;
  CDoublet lNext = lCur;
  lNext.setNextPointel();
  do
    {
      ++FMove;
      lNext.setNextLinel();
    }
  while( !FMap->isLCell( lNext ) );

  // Stop the coverage if an existing pointel is found or if a loop is complete.
  if( lNext == lFirst || FMap->isPCell( lNext ) )
    FStop = true;

  lCur = lNext;
}
//******************************************************************************
INLINE
CDoublet CCoverageEdgeLinels::operator++( int )
{
  CDoublet lTmp = lCur;
  operator ++();
  return lTmp;
}
//******************************************************************************
INLINE
void CCoverageEdgeLinels::operator--()
{
  assert( reverseCont() );
  assert( FMap->isLCell( lCur ) );

  FMove = 0;
  CDoublet lNext = lCur;
  do
    {
      ++FMove;
      lNext.setPrevLinel();
    }
  while( !FMap->isLCell( lNext ) );
  lNext.setNextPointel();

  FStop = false;

  lCur = lNext;
}
//******************************************************************************
INLINE
CDoublet CCoverageEdgeLinels::operator--( int )
{
  CDoublet lTmp = lCur;
  operator --();
  return lTmp;
}
//******************************************************************************
INLINE
bool CCoverageEdgeLinels::cont() const
{
  return !FStop;
}
//******************************************************************************
INLINE
bool CCoverageEdgeLinels::reverseCont() const
{
  return (lCur != lFirst) || FStop;
}
//******************************************************************************
INLINE
int CCoverageEdgeLinels::getMove() const
{
  return FMove;
}
//******************************************************************************
INLINE
void CCoverageEdgeLinels::reinit()
{
  lCur = lFirst;
  FStop = false;
}
//******************************************************************************
INLINE
CDoublet CCoverageEdgeLinels::operator*() const
{
  return lCur;
}
//******************************************************************************
} // namespace Map2d
//******************************************************************************
