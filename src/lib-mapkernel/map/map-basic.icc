/*
 * lib-mapkernel : Un noyau de 2-cartes et des opérations.
 * Copyright (C) Moka Team, moka@sic.univ-poitiers.fr
 *               http://www.sic.univ-poitiers.fr/moka/
 *
 * This file is part of lib-mapkernel
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//******************************************************************************
#include "dart.hh"
#include <cassert>
#include <iostream>
//******************************************************************************
namespace Map2d
{
//******************************************************************************
INLINE
void CMapBasic::removeAllDarts()
{
  // On détruit tout les tableaux de brins.
  for ( unsigned int i=0; i<FNbTabsDarts; ++i )
    {
      deleteTabDarts(FTabsDarts[i]); FTabsDarts[i]=NULL;
    }

  FNbTabsDarts      = 0;
  FNbDartsInLastTab = 0;
  FNbDarts          = 0;
  FFirstDeleteDart  = NULL;
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::empty()
{
  removeAllDarts();

  // Met tout les bits à faux :
  FMaskMarks.reset();
  FUsedMarks.reset();
  FUsedDirectInfo.reset();

  FNbUsedMarks       = 0;
  FNbUsedDirectInfos = 0;

#ifndef NDEBUG
  FMaxNbUsedMarks   = 0;
  FMaxNbUsedDirectInfos = 0;
  FMsgDirectInfo        = false;
#endif // NDEBUG

  int i;

  for (i=0; i<NB_MARKS; ++i)
    FMarks[i] = i;

  for (i=0; i<NB_DIRECT_INFO; ++i)
    FDirectInfos[i] = i;

  // On réserve la marque des brins à détuire.
  FMarkToDelete = getNewMark();
  assert( FMarkToDelete!=-1 );
}
//******************************************************************************
INLINE
CMapBasic::CMapBasic(unsigned int ASizeDartArray) :
  FNbTabsDarts  (0),
  FSizeDartArray(ASizeDartArray)
{
  empty();
}
//******************************************************************************
INLINE
CDart* CMapBasic::newTabDarts()
{
  assert(false);
  return new CDart[FSizeDartArray];
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::deleteTabDarts(CDart* ATabDart)
{
  assert(false);
  delete []ATabDart;
}
//------------------------------------------------------------------------------
INLINE
CDart* CMapBasic::getDart(unsigned int Ai, unsigned int Aj) const
{
  assert(false);
  assert( Ai<FNbTabsDarts && Aj<FSizeDartArray );

  return (FTabsDarts[Ai])+Aj;
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::initDart(CDart* ADart)
{
  assert( ADart!=NULL );
  ADart->init(FMaskMarks);
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::delMapDart(CDart* ADart)
{
  assert( ADart!=NULL );
  setMark(ADart,FMarkToDelete);
  --FNbDarts;

  ADart->setBeta0(FFirstDeleteDart);
  FFirstDeleteDart=ADart;

#ifdef CONTOUR_SIMPLIFICATION
  CEdgeAttribute* toDelete = ADart->FEdgeAttribute;
  ADart->FEdgeAttribute=NULL;
  delete toDelete;
#endif // CONTOUR_SIMPLIFICATION
}
//------------------------------------------------------------------------------
INLINE
bool CMapBasic::isMarkedDeleted(CDart* ADart) const
{
   assert( ADart!=NULL );
   return isMarked(ADart,FMarkToDelete);
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::copyDart(CDart* ADartDest, CDart* ADartSrc)
{
  assert( false );

  assert( ADartDest!=NULL && ADartSrc!=NULL );
  ADartDest->copy(ADartSrc);
}
//------------------------------------------------------------------------------
INLINE
CDart* CMapBasic::addMapDart()
{
  CDart* res;

 // S'il n'y a de brins détruits il faut éventuellement allouer.
  if ( FFirstDeleteDart==NULL )
    {
      /// Si le dernier tableau de brins est plein, il faut en allouer un nouveau
      if ( FNbTabsDarts==0 || FNbDartsInLastTab==FSizeDartArray )
    {
      FTabsDarts.push_back(newTabDarts());
      assert( FTabsDarts[FNbTabsDarts]!=NULL );
      ++FNbTabsDarts;
      FNbDartsInLastTab = 0;
    }

      ++FNbDartsInLastTab;

      res = getDart(FNbTabsDarts-1, FNbDartsInLastTab-1);
    }
  // Sinon on prend le premier brin de la liste désigné par FFirstDeleteDart
  else
    {
      res = FFirstDeleteDart;
      FFirstDeleteDart=FFirstDeleteDart->getBeta0();
    }

  ++FNbDarts;
  initDart(res);

  return res;
}
//------------------------------------------------------------------------------
INLINE
unsigned int CMapBasic::getNbDarts() const
{ return FNbDarts; }
//------------------------------------------------------------------------------
INLINE
unsigned int CMapBasic::getNbDartsInTabs() const
{ return FNbTabsDarts * FSizeDartArray; }
//------------------------------------------------------------------------------
INLINE
unsigned int CMapBasic::getSizeDartArray() const
{ return FSizeDartArray; }
//------------------------------------------------------------------------------
INLINE
unsigned int CMapBasic::getNbTabsDarts() const
{ return FNbTabsDarts; }
//------------------------------------------------------------------------------
INLINE
unsigned int CMapBasic::getNbDartsInLastTab() const
{ return FNbDartsInLastTab; }
//------------------------------------------------------------------------------
INLINE
int CMapBasic::getMarkToDelete() const
{ return FMarkToDelete; }
//******************************************************************************
INLINE
bool CMapBasic::isFree(const CDart* ADart, int AIndex) const
{
  assert( ADart!=NULL );
  return ADart->isFree(AIndex);
}
//------------------------------------------------------------------------------
INLINE
bool CMapBasic::isFree0(const CDart* ADart) const
{
  assert( ADart!=NULL );
  return ADart->isFree0();
}
//------------------------------------------------------------------------------
INLINE
bool CMapBasic::isFree1(const CDart* ADart) const
{
  assert( ADart!=NULL );
  return ADart->isFree1();
}
//------------------------------------------------------------------------------
INLINE
bool CMapBasic::isFree2(const CDart* ADart) const
{
  assert( ADart!=NULL );
  return ADart->isFree2();
}
//******************************************************************************
INLINE
CDart* CMapBasic::beta(const CDart* ADart, int AIndex) const
{
  assert( ADart!=NULL );
  return ADart->getBeta(AIndex);
}
//------------------------------------------------------------------------------
INLINE
CDart* CMapBasic::beta0(const CDart* ADart) const
{
  assert( ADart!=NULL );
  return ADart->getBeta0();
}
//------------------------------------------------------------------------------
INLINE
CDart* CMapBasic::beta1(const CDart* ADart) const
{
  assert( ADart!=NULL );
  return ADart->getBeta1();
}
//------------------------------------------------------------------------------
INLINE
CDart* CMapBasic::beta2(const CDart* ADart) const
{
  assert( ADart!=NULL );
  return ADart->getBeta2();
}
//******************************************************************************
INLINE
int CMapBasic::getNewDirectInfo()
{
#ifndef NDEBUG
  if (FNbUsedDirectInfos == FMaxNbUsedDirectInfos)
    FMaxNbUsedDirectInfos = FNbUsedDirectInfos + 1;
#endif // NDEBUG

  if (FNbUsedDirectInfos == NB_DIRECT_INFO)
    {
#ifndef NDEBUG
      if ( FMaxNbUsedDirectInfos == FNbUsedDirectInfos+1 && !FMsgDirectInfo )
    {
      std::cerr<<"Pas assez de champs directInfo "
           <<" (voir macro NB_DIRECT_INFO). "
           <<"Il en faudrait "<<FMaxNbUsedDirectInfos<<std::endl;
      FMsgDirectInfo = true;
    }
#endif // NDEBUG

      return -1;
    }

  int directInfo = FDirectInfos[FNbUsedDirectInfos ++];
  FUsedDirectInfo.set(directInfo, true);
  return directInfo;
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::freeDirectInfo(int ADirectIndex)
{
  assert(0 <= ADirectIndex && ADirectIndex < NB_DIRECT_INFO);
  assert(FUsedDirectInfo[ADirectIndex]);

  FUsedDirectInfo.set(ADirectIndex, false);
  FDirectInfos[-- FNbUsedDirectInfos] = ADirectIndex;
}
//------------------------------------------------------------------------------
INLINE
void* CMapBasic::getDirectInfo(CDart* ADart, int ADirectIndex) const
{
  assert( ADart!=NULL );
  assert( FUsedDirectInfo[ADirectIndex] );

  return ADart->getDirectInfo(ADirectIndex);
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::setDirectInfo(CDart* ADart, int ADirectIndex, void* APointer)
{
  assert( ADart!=NULL );
  assert( FUsedDirectInfo[ADirectIndex] );

  ADart->setDirectInfo(ADirectIndex, APointer);
}
//******************************************************************************
INLINE
bool CMapBasic::getMaskMark(int AMarkNumber) const
{ return FMaskMarks[AMarkNumber]; }
//------------------------------------------------------------------------------
INLINE
int CMapBasic::getNbUsedMarks() const
{ return FNbUsedMarks; }
//------------------------------------------------------------------------------
INLINE
void CMapBasic::setMarks(CDart* ADart, const std::bitset<NB_MARKS> & AMarks) const
{ ADart->setMarks(AMarks ^ FMaskMarks); }
//------------------------------------------------------------------------------
INLINE
std::bitset<NB_MARKS> CMapBasic::getMarks(CDart* ADart) const
{ return ADart->getMarks() ^ FMaskMarks; }
//------------------------------------------------------------------------------
INLINE
int CMapBasic::getNewMark()
{
#ifndef NDEBUG
  if ( FNbUsedMarks==NB_MARKS )
    // Pas assez de marques booléennes (voir macro NB_MARKS).
    assert(false);

  if (FNbUsedMarks==FMaxNbUsedMarks)
    FMaxNbUsedMarks = FNbUsedMarks + 1;
#endif // NDEBUG

  int mark = FMarks[FNbUsedMarks++];
  FUsedMarks.set(mark, true);
  return mark;
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::negateMaskMark(int AMarkNumber)
{
  assert(FUsedMarks[AMarkNumber]);

  FMaskMarks.flip(AMarkNumber);
}
//------------------------------------------------------------------------------
INLINE
bool CMapBasic::isMarked(const CDart* ADart, int AMarkNumber) const
{
  assert( ADart!=NULL );
  assert(FUsedMarks[AMarkNumber]);

  return ADart->getMark(AMarkNumber)!=getMaskMark(AMarkNumber);
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::setMarkTo(CDart* ADart, int AMarkNumber, bool AState)
{
  assert( ADart!=NULL );
  assert(FUsedMarks[AMarkNumber]);

  ADart->setMark(AMarkNumber, AState ^ FMaskMarks[AMarkNumber]);
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::setMark(CDart* ADart, int AMarkNumber)
{ setMarkTo(ADart, AMarkNumber, true); }
//------------------------------------------------------------------------------
INLINE
void CMapBasic::unsetMark(CDart* ADart, int AMarkNumber)
{ setMarkTo(ADart, AMarkNumber, false); }
//------------------------------------------------------------------------------
INLINE
bool CMapBasic::isWholeMapUnmarked(int AMarkNumber)
{
  unsigned int i,j;
  for ( i=0; i<FNbTabsDarts-1; ++i )
    {
      for ( j=0; j<FSizeDartArray; ++j )
    if ( !isMarkedDeleted(getDart(i,j)) )
      if (isMarked(getDart(i,j), AMarkNumber))
        return false;
    }
  // On traite la dernière ligne à part car il faut s'arrêter avant.
  for ( j=0; j<FNbDartsInLastTab; ++j )
     if ( !isMarkedDeleted(getDart(FNbTabsDarts-1,j)) )
        if (isMarked(getDart(FNbTabsDarts-1,j), AMarkNumber))
    return false;

  return true;
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::freeMark(int AMarkNumber)
{
  // L'assert qui tue:
  //  assert(isWholeMapUnmarked(AMarkNumber));

  assert( 0<=AMarkNumber && AMarkNumber<NB_MARKS );
  assert( FUsedMarks[AMarkNumber] );

  FUsedMarks.set(AMarkNumber, false);
  FMarks[-- FNbUsedMarks] = AMarkNumber;
}
//******************************************************************************
INLINE
void CMapBasic::linkBeta(CDart* ADart1, CDart* ADart2, int AIndex)
{
  assert( ADart1!=NULL && ADart2!=NULL);

  ADart1->setBeta(ADart2, AIndex);

  if      (AIndex==0) ADart2->setBeta(ADart1, 1);
  else if (AIndex==1) ADart2->setBeta(ADart1, 0);
  else                ADart2->setBeta(ADart1, AIndex);
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::linkBeta0(CDart* ADart1, CDart* ADart2)
{ linkBeta(ADart1, ADart2, 0); }
//------------------------------------------------------------------------------
INLINE
void CMapBasic::linkBeta1(CDart* ADart1, CDart* ADart2)
{ linkBeta(ADart1, ADart2, 1); }
//------------------------------------------------------------------------------
INLINE
void CMapBasic::linkBeta2(CDart* ADart1, CDart* ADart2)
{ linkBeta(ADart1, ADart2, 2); }
//******************************************************************************
INLINE
void CMapBasic::unlinkBeta(CDart* ADart, int AIndex)
{
  assert( ADart!=NULL );

  if (AIndex==0)       ADart->getBeta0()->setFree1();
  else if (AIndex==1)  ADart->getBeta1()->setFree0();
  else                 ADart->getBeta(AIndex)->setFree(AIndex);

  ADart->setFree(AIndex);
}
//------------------------------------------------------------------------------
INLINE
void CMapBasic::unlinkBeta0(CDart* ADart)
{ unlinkBeta(ADart, 0); }
//------------------------------------------------------------------------------
INLINE
void CMapBasic::unlinkBeta1(CDart* ADart)
{ unlinkBeta(ADart, 1); }
//------------------------------------------------------------------------------
INLINE
void CMapBasic::unlinkBeta2(CDart* ADart)
{ unlinkBeta(ADart, 2); }

//******************************************************************************
} // namespace Map2d
//******************************************************************************
