/*
 * Copyright (C) 2008-2011, Romain Goffe <romain.goffe@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//******************************************************************************
#include <cassert>
#include <cmath>
#include <sys/stat.h>
#include <sys/types.h>
#include "KMdata.h"
using namespace fogrimmi;
//******************************************************************************

INLINE
uint CImageTiff::pageFromDepth(uint ADepth) const
{
  return (ADepth > FNbPages-1)?FPages[FNbPages-1]:FPages[ADepth];
}
//------------------------------------------------------------------------------
INLINE
void CImageTiff::read(const IM_Box& ABox, int ADepth)
{
  uint page = (ADepth==-1)?pageFromDepth(getCurrentPage()):pageFromDepth(ADepth);
  IM_Tiff::read(ABox, page);
}
//------------------------------------------------------------------------------
INLINE
int CImageTiff::colorMode() const
{
  return FColorMode;
}
//------------------------------------------------------------------------------
INLINE
uint CImageTiff::depth() const
{
  return FDepth;
}
//------------------------------------------------------------------------------
INLINE
void CImageTiff::setDepth(uint ADepth) 
{
   FDepth = ADepth;
}
//------------------------------------------------------------------------------
INLINE
TLabel CImageTiff::getPixelGreyValue(const IM_Pixel & APixel, GreyConvertMode AMethod) const
{ 
  switch(AMethod)
    {
    case Basic:
      // conversion basique 
      return 0.33*APixel.value[0] + 0.33*APixel.value[1] + 0.33*APixel.value[2];

    case Gamma:
      // conversion vers niveaux de gris recommandation 601: correction gamma
      return 0.299*APixel.value[0] + 0.587*APixel.value[1] + 0.114*APixel.value[2];

    case Natural:
      // conversion vers niveaux de gris recommandation 709: couleurs naturelles 
      return 0.2125*APixel.value[0] + 0.7154*APixel.value[1] + 0.0721*APixel.value[2];

    default:
      assert(false); return 0;
    }
}
//------------------------------------------------------------------------------
INLINE
void CImageTiff::getPixel(IM_Pixel & APixel, uint ADepth)
{
  uint page = pageFromDepth(ADepth);
  getPixelValue(APixel, page);
}
//------------------------------------------------------------------------------
INLINE
uint CImageTiff::getXSize(uint ADepth) 
{  
  uint page = pageFromDepth(ADepth);
  return getPageWidth(page);
}
//------------------------------------------------------------------------------
INLINE
uint CImageTiff::width(uint ADepth)
{
  return getXSize(ADepth);
}
//------------------------------------------------------------------------------
INLINE
uint CImageTiff::getYSize(uint ADepth)
{
  uint page = pageFromDepth(ADepth);
  return getPageHeight(page);
}
//------------------------------------------------------------------------------
INLINE
uint CImageTiff::height(uint APage)
{
  return getYSize(APage);
}
//------------------------------------------------------------------------------
INLINE
bool CImageTiff::isOk() const
{
  return FIsOk;
}
//------------------------------------------------------------------------------
INLINE
uint CImageTiff::getNumberOfByte() const
{
  return sizeof(this);
}
//------------------------------------------------------------------------------
INLINE
bool CImageTiff::isPixelInImage(uint Ax, uint Ay, uint ADepth) 
{
  return Ax<width(ADepth) && Ay<height(ADepth); 
}
//------------------------------------------------------------------------------
INLINE
bool CImageTiff::isPixelInImage(const IM_Pixel & APixel, uint ADepth) 
{
  return APixel.x<width(ADepth) && APixel.y<height(ADepth); 
}

//------------------------------------------------------------------------------
INLINE
void CImageTiff::unload()
{
  for(unsigned short int i = 0; i<FNbPages; ++i)
    unLoad(i);
  
  if(this!=NULL)
    close();
}
//------------------------------------------------------------------------------
INLINE
uint8* CImageTiff::getData()
{
  uint mode = colorMode() == RGB ? 3 : 1;
  IM_Pixel pix;
  unsigned long int n = 0;

  uint8* data = new uint8[nbCurrentBoxPixels()*mode*sizeof(uint8)];
  for( uint y = ystart(); y < ystop(); ++y)
    {
      pix.y = y;
      for( uint x = xstart(); x < xstop(); ++x)
	{
	  pix.x = x;
	  getPixel(pix, depth());

	  for(uint i=0; i<mode; ++i)
	      data[n++] = pix.value[i];
	}
    }

  return data;
}

//------------------------------------------------------------------------------
INLINE
uint8* CImageTiff::getDataQT()
{
  IM_Pixel pix;
  unsigned long int n = 0;
  
  uint8* data = new uint8[ nbCurrentBoxPixels() * 4 * sizeof(uint8) ];
  //uint8* data = new uint8[(xstop-xstart+1)*(ystop-ystart+1)*4*sizeof(uint8)];
  if(colorMode()==RGB)
    for( uint y = ystart(); y < ystop(); ++y)
      {
	pix.y = y;
	for( uint x = xstart(); x < xstop(); ++x)
	  {
	    pix.x = x;
	    getPixel(pix, depth());
	    data[n++] = pix.value[0];
	    data[n++] = pix.value[1];
	    data[n++] = pix.value[2];
	    data[n++] = 255;
	  }
      }
  else if(colorMode()==Grey)
    for( uint y = ystart(); y < ystop(); ++y)
      {
	pix.y = y;
	for( uint x = xstart(); x < xstop(); ++x)
	  {
	    pix.x = x;
	    getPixel(pix, depth());
	    data[n++] = pix.value[0]*(0.66);
	    data[n++] = pix.value[0]*(0.66);
	    data[n++] = pix.value[0]*(0.66);
	    data[n++] = 255;
	  }
      }
  else
    std::cout<<"CImageTiff::getAllDataFromModeQT error: unrecognized image mode"<<std::endl;
  
  return data;
}
//------------------------------------------------------------------------------
INLINE
void CImageTiff::openPage(uint ADepth) 
{
  uint page = pageFromDepth(ADepth);
  open(page);
}
//------------------------------------------------------------------------------
INLINE
uint CImageTiff::getNbTilesWidth(uint ATileWidth, uint ADepth)
{
  uint imageWidth = width(ADepth);
  uint truncated = (imageWidth % ATileWidth > 0)?1:0;
  return imageWidth/ATileWidth + truncated;
}
//------------------------------------------------------------------------------
INLINE
uint CImageTiff::getNbTilesHeight(uint ATileHeight, uint ADepth)
{
  uint imageHeight = height(ADepth);
  uint truncated = (imageHeight % ATileHeight > 0)?1:0;
  return imageHeight/ATileHeight + truncated;
}
//------------------------------------------------------------------------------
INLINE
double CImageTiff::distance(const IM_Pixel & p, const IM_Pixel & q) 
{ 
  if(colorMode()==RGB)
    return (double) sqrt( SQR(p.value[0]-q.value[0]) + SQR(p.value[1]-q.value[1]) + SQR(p.value[2]-q.value[2]) );
  else if(colorMode()==Grey)
    return (double)fabs(p.value[0]-q.value[0]);
  assert(false); return 0;
}
//------------------------------------------------------------------------------
INLINE
double CImageTiff::poids(const IM_Pixel & p, const IM_Pixel & q)
{ 
  if(colorMode()==RGB)
    {
      double pds,val;
      val=distance(p,q);
      if (val<JND)
	pds=1;
      else
	// sqrt(3)*255 = distance MAX entre deux intensitÃ©s 
	//de pixel sqrt(255*255+255*255+255*255)
	pds=MAX(0,1-val/(sqrt(3)*255));
      return pds;
    }
  else if(colorMode()==Grey)
    return 1/(distance(p,q) + epsilon);
  
  assert(false); return 0;
}

//------------------------------------------------------------------------------
INLINE
void CImageTiff::moveClasses(uint8* data, uint ASize, uint dim)
{
  std::map<std::vector<uint>, uint> labels;
  uint value = 0;
  for(uint i=0; i<ASize; i=i+dim)
    {
      std::vector<uint> key;
      for(uint j=0; j<dim; ++j)
	key.push_back((uint)data[i+j]);

      if(labels.find( key ) == labels.end())
	labels[key] = ++value;
      
      if(labels[key]>dim)
	labels[key]=dim;

      for(uint j=0; j<dim; ++j)
	data[i+j]   = labels[key];
    }
}
//------------------------------------------------------------------------------
INLINE
void CImageTiff::mergeClasses(int cl1, int cl2, uint8* data, uint ASize)
{
  for(uint i=0; i<ASize; ++i)
    if (data[i] == cl2) 
      data[i] = cl1;
}

//------------------------------------------------------------------------------
INLINE
void CImageTiff::regularization(int nb_iteration, 
				int pp, 
				double lambda, 
				int voisinage)
{
  switch(colorMode())
    {
    case RGB:
      colorRegularization(nb_iteration, pp, lambda, voisinage);
      break;
    case Grey:
      greyRegularization(nb_iteration, pp, lambda, voisinage);
      break;
    default:
      std::cout<<"CImageTiff::regularization color encoding not supported : "<< colorMode() <<std::endl;
      assert(false);
      break;
    }
}
//******************************************************************************
INLINE
std::string CImageTiff::filename(const std::string & AExt) const
{
  std::ostringstream stream;
  stream << FFilename << "-"<< depth() << "." << AExt;
  return stream.str();
}

INLINE
void CImageTiff::setFilename(const std::string & AFilename)
{
  FFilename = AFilename;
}


INLINE
void CImageTiff::getKmeansData(KMdata& data)
{
  if(colorMode() == RGB)
    getKmeansDataRGB(data);
  else if(colorMode() == Grey)
    getKmeansDataRGB(data);
  else
    std::cout<<"CImageTiff::kmeans image encoding not supported"<<std::endl;
}

INLINE
void CImageTiff::getKmeansDataGrey(KMdata& data)
{
  IM_Pixel pix; 
  uint i = 0;
  for(uint y=ystart(); y<ystop(); ++y)
    {
      pix.y = y;
      for(uint x=xstart(); x<xstop(); ++x)
	{
	  pix.x = x;
	  getPixel(pix, depth());
	  data[i][0] = pix.value[0];
	  data[i][1] = pix.value[0];
	  data[i][2] = pix.value[0];
	  ++i;
	}
    }
}

INLINE
void CImageTiff::getKmeansDataRGB(KMdata& data)
{
  IM_Pixel pix; 
  uint i = 0;
  for(uint y=ystart(); y<ystop(); ++y)
    {
      pix.y=y;
      for(uint x=xstart(); x<xstop(); ++x)
	{
	  pix.x = x;
	  getPixel(pix, depth());
	  data[i][0] = pix.value[0];
	  data[i][1] = pix.value[1];
	  data[i][2] = pix.value[2];
	  ++i;
	}
    }
}

INLINE
uint8* CImageTiff::kmeans(uint ANbClass)
{
#ifdef OPENMP
  return simplekmeans(ANbClass);
#else
  return kmeansKMLocal(ANbClass);
#endif
}

INLINE
uint CImageTiff::xstart() const
{
  return (uint) currentBox().XTop;
}

INLINE
uint CImageTiff::xstop() const
{
  return (uint) currentBox().XBtm;
}

INLINE
uint CImageTiff::ystart() const
{
  return (uint) currentBox().YTop;
}

INLINE
uint CImageTiff::ystop() const
{
  return (uint) currentBox().YBtm;
}

INLINE
fogrimmi::IM_Box CImageTiff::currentBox() const
{
  return m_currentBox;
}

INLINE
void CImageTiff::setCurrentBox(const IM_Box & box)
{
  if( xstart() != box.XTop || xstop()  != box.XBtm ||
      ystart() != box.YTop || ystop()  != box.YBtm )
    {
      m_currentBox = box;
      read( currentBox() );
    }
}

INLINE
uint CImageTiff::nbCurrentBoxPixels() const
{
  assert( xstop() >= xstart() );
  assert( ystop() >= ystart() );
  return ( xstop() - xstart() )*( ystop() - ystart() );
}

/*
void CImageTiff::getData(const IM_Box& a_Box, 
			 CMatrix* data,
			 const uint a_Depth, 
			 const DataReadMode & a_mode)
{
  IM_Pixel pix;
  unsigned long int n = 0;
  uint xstart, ystart, xstop, ystop;
  xstart = (uint) ABox.XTop;
  ystart = (uint) ABox.YTop;
  xstop  = (uint) ABox.XBtm;
  ystop  = (uint) ABox.YBtm;
  
  uint8* data = new uint8[(xstop-xstart+1)*(ystop-ystart+1)*4*sizeof(uint8)];
  
  if(colorMode()==RGB)
    for( uint y = ystart; y < ystop; ++y)
      {
	pix.y = y;
	for( uint x = xstart; x < xstop; ++x)
	  {
	    pix.x = x;
	    getPixel(pix, ADepth);
	    data[n++] = pix.value[0];
	    data[n++] = pix.value[1];
	    data[n++] = pix.value[2];
	    data[n++] = 255;
	  }
      }
  else if(colorMode()==Grey)
    for( uint y = ystart; y < ystop; ++y)
      {
	pix.y = y;
	for( uint x = xstart; x < xstop; ++x)
	  {
	    pix.x = x;
	    getPixel(pix, ADepth);
	    data[n++] = pix.value[0]*(0.66);
	    data[n++] = pix.value[0]*(0.66);
	    data[n++] = pix.value[0]*(0.66);
	    data[n++] = 255;
	  }
      }
  else
    std::cout<<"CImageTiff::getAllDataFromModeQT error: unrecognized image mode"<<std::endl;
  
  return data;
}

*/
