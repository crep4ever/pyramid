/*
 * Copyright (C) 2008-2011, Romain Goffe <romain.goffe@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//******************************************************************************
#include "pyramidal-region.hh"
//******************************************************************************

//******************************************************************************
//Constructeurs
//******************************************************************************
namespace clustering
{
  INLINE
  CMergeGrey::CMergeGrey() :
    CCriterionMerge (),
    m_mergeThreshold  ( 0 ) // On ne merge pas les régions
  {}
  //------------------------------------------------------------------------------
  INLINE
  CMergeGrey::~CMergeGrey()
  {}
  //------------------------------------------------------------------------------
  INLINE
  CMergeGrey::CMergeGrey(Map2d::CRegion* ARegion1, Map2d::CRegion* ARegion2, unsigned int AMergeThreshold) :
    CCriterionMerge(ARegion1, ARegion2){
    m_mergeThreshold = AMergeThreshold;
  }

  //******************************************************************************
  //Accesseurs
  //******************************************************************************

  INLINE
  unsigned int CMergeGrey::getMergeThreshold() const
  { return m_mergeThreshold; }
  //------------------------------------------------------------------------------
  INLINE
  void CMergeGrey::setMergeThreshold(unsigned int AMergeThreshold){
    m_mergeThreshold = AMergeThreshold;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CMergeGrey::isRegionToMerge()
  {
    // Les deux région doivent être issues du même père
    // pour garder la causalité top-down
    pyramid::CPyramidalRegion* region1 = static_cast<pyramid::CPyramidalRegion*>(m_region1);
    pyramid::CPyramidalRegion* region2 = static_cast<pyramid::CPyramidalRegion*>(m_region2);
    //désactivé pour les bords fictifs
    //assert( region1->getRegionUp() ==region2->getRegionUp() );

    int color1 = (int) region1->getAverageGrey(); //couleur de la région 1
    int color2 = (int) region2->getAverageGrey(); //couleur de la région 2
    unsigned int diff = (unsigned int ) abs(color1-color2);

    //std::cout<<"Merge grey entre "<<m_region1->getId()<<" et "<<m_region2->getId()<<std::endl;
    //std::cout<<"Diff average gray = "<<diff<<" seuil de merge = "<<getMergeThreshold()<<std::endl;
    return diff < getMergeThreshold();
  }
} // end namespace clustering
//******************************************************************************
