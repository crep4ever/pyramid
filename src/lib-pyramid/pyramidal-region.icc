/*
 * Copyright (C) 2008-2011, Romain Goffe <romain.goffe@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#include <cmath>
#include "pyramidal-dart.hh"

namespace pyramid
{
  INLINE
  CPyramidalRegion::~CPyramidalRegion()
  {
    //std::cout<<" [start] CPyramidalRegion::destructeur() "<<std::endl;
    m_up    = NULL;
    m_down  = NULL;
    m_label = Invalid;
    //  std::cout<<" [end] CPyramidalRegion::destructeur() "<<std::endl;
  }

  INLINE
  CPyramidalRegion::CPyramidalRegion() :
    CRegion      (  ),
    m_up         ( NULL ),
    m_down       ( NULL ),
    m_label      ( Invalid )
  {
    setNextSameCC(this);
    setFirstSon(NULL);
  }

  INLINE
  CPyramidalRegion::CPyramidalRegion(const CRegion& region) :
    CRegion      (  ),
    m_up         ( NULL ),
    m_down       ( NULL ),
    m_label      ( Invalid )
  { }

  INLINE
  CPyramidalRegion::CPyramidalRegion(const CPyramidalRegion& region) :
    CRegion            ( )
  {
    setId(static_cast<TRegionId>(0));
    setProfondeur(region.FProfondeur);
    FNbPixels      =  region.FNbPixels;
    FMarks         =  region.FMarks;
    m_up           =  NULL;
    m_down         =  NULL;
    m_label      =  region.m_label;
    FColorSum = region.FColorSum;
    FSquaredColorSum = region.FSquaredColorSum;
    FColorMin = region.FColorMin;
    FColorMax = region.FColorMax;
  }

  INLINE
  CPyramidalRegion* CPyramidalRegion::up() const
  { return m_up; }

  INLINE
  void CPyramidalRegion::setUp( CPyramidalRegion* region )
  { m_up = region; }

  INLINE
  CPyramidalRegion* CPyramidalRegion::down() const
  { return m_down; }

  INLINE
  void CPyramidalRegion::setDown(CPyramidalRegion* region)
  { m_down = region; }

  INLINE
  CPyramidalRegion::Label CPyramidalRegion::label() const
  { return m_label; }

  INLINE
  void CPyramidalRegion::setLabel( const Label & label )
  { m_label = label; }

  INLINE
  TRegionId CPyramidalRegion::getGreyMin() const
  { return FColorMin; }

  INLINE
  void CPyramidalRegion::setGreyMin(TRegionId AGreyMin)
  { FColorMin = AGreyMin; }

  INLINE
  uint CPyramidalRegion::getGreyMax() const
  { return FColorMax; }

  INLINE
  void CPyramidalRegion::setGreyMax(TRegionId AGreyMax)
  { FColorMax = AGreyMax; }

  INLINE
  uint CPyramidalRegion::getGreySum() const
  { return FColorSum; }

  INLINE
  void CPyramidalRegion::setGreySum(uint sum)
  { FColorSum = sum; }

  INLINE
  uint CPyramidalRegion::getGreySquareSum() const
  { return FSquaredColorSum; }

  INLINE
  void CPyramidalRegion::setGreySquareSum( uint ASquaredGreySum )
  { FSquaredColorSum = ASquaredGreySum; }

  INLINE
  float CPyramidalRegion::deviation() const
  {
    if(getNbPixels() ==  0)
      return 0;
    return
      sqrt(getGreySquareSum()/getNbPixels() -
	   (getGreySum()/getNbPixels())*(getGreySum()/getNbPixels()));
  }

  INLINE
  CPoint2D CPyramidalRegion::firstPixel() const
  { return CPoint2D( getFirstPixel().getX(), getFirstPixel().getY() ); }

  INLINE
  void CPyramidalRegion::setFirstPixel(const CPoint2D& pixel)
  { CRegion::setFirstPixel(CCoordinate(pixel.x(), pixel.y())); }

  INLINE
  unsigned int CPyramidalRegion::getNbPixels() const
  { return FNbPixels; }

  INLINE
  void CPyramidalRegion::setNbPixels(unsigned int ANbPixels)
  { FNbPixels = ANbPixels; }

  INLINE
  bool CPyramidalRegion::existUp()
  { return(m_up != NULL); }

  INLINE
  void CPyramidalRegion::addPixel( TRegionId ACoul, CDart* dart )
  {
    ++FNbPixels;
    CRegion::addPixel(ACoul, dart);
  }

  INLINE
  bool CPyramidalRegion::existDown()
  { return(m_down != NULL); }

  INLINE
  CDart* CPyramidalRegion::getRepresentativeDart() const
  { return static_cast<CPyramidalDart*>(CRegion::getRepresentativeDart()); }

  INLINE
  void CPyramidalRegion::setRepresentativeDart(CDart* dart)
  { return CRegion::setRepresentativeDart(static_cast<CPyramidalDart*>(dart)); }

  INLINE
  CPyramidalRegion* CPyramidalRegion::father() const
  { return static_cast<CPyramidalRegion*>(CRegion::getFather()); }

  INLINE
  void CPyramidalRegion::setFather(CPyramidalRegion* region)
  {  CRegion::setFather(region); }

  INLINE
  CPyramidalRegion* CPyramidalRegion::brother() const
  { return static_cast<CPyramidalRegion*>(CRegion::getBrother()); }

  INLINE
  void CPyramidalRegion::setBrother(CPyramidalRegion* region)
  {  CRegion::setBrother(region); }

  INLINE
  CPyramidalRegion* CPyramidalRegion::firstSon() const
  { return static_cast<CPyramidalRegion*>(CRegion::getFirstSon()); }

  INLINE
  void CPyramidalRegion::setFirstSon(CPyramidalRegion* region)
  {  CRegion::setFirstSon(region); }

  INLINE
  CPyramidalRegion* CPyramidalRegion::nextSameCC() const
  { return static_cast<CPyramidalRegion*>(CRegion::getNextSameCC()); }

  INLINE
  void CPyramidalRegion::setNextSameCC(CPyramidalRegion* region)
  {  CRegion::setNextSameCC(region); }

  INLINE
  void CPyramidalRegion::addGrey(TRegionId AGrey)
  { FColorSum += AGrey; }

  INLINE
  TRegionId CPyramidalRegion::getAverageGrey() const
  {
    assert( FNbPixels > 0 );
    return FColorSum/FNbPixels;
  }

//  INLINE
//  CRegion* CPyramidalRegion::addSon( TRegionId AId )
//  {
//    CPyramidalRegion* tmp = new CPyramidalRegion(*this);
//    tmp->setId( AId );
//    tmp->setFather( this );
//    CRegion::addSon(tmp);
//    return tmp;
//  }
//
//  INLINE
//  CRegion* CPyramidalRegion::addBrother( TRegionId AId )
//  {
//    assert( getFather()!=NULL );
//    return getFather()->CRegion::addSon(AId);
//  }
//
//  INLINE
//  CRegion* CPyramidalRegion::addSameCC( TRegionId AId )
//  {
//    CPyramidalRegion* tmp = new CPyramidalRegion(*this);
//    tmp->setId( AId );
//    tmp->setFather( getFather() );
//    CRegion::addSameCC(tmp);
//    return tmp;
//  }

  INLINE
  void CPyramidalRegion::mergeWith(CPyramidalRegion* region)
  {
    // Preserve up/down
    if( region->existUp() &&
	region->up()->down() == region )
      region->up()->setDown(this);
    CRegion::mergeWith(region);
  }

  INLINE
  TRegionId CPyramidalRegion::id() const
  { return m_id; }

  INLINE
  void CPyramidalRegion::setId(TRegionId id)
  { m_id = id ; }

  INLINE
  CInfinitePyramidalRegion::CInfinitePyramidalRegion() :
    CPyramidalRegion ()
  {
    setId(static_cast<TRegionId>(1));
    setUp( NULL);
    setDown( NULL);
    setGreyMin( 255 );
    setGreyMax( 0 );
    setNextSameCC(this);
  }

  INLINE
  bool CInfinitePyramidalRegion::isInfiniteRegion() const
  { return true; }

} // namespace pyramid
