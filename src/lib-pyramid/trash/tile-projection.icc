#include "matrix.hh"
#include "array.hh"
#include "pyramidal-dart.hh"
#include "pyramidal-region.hh"
#include "traversal-region-pixels.hh"
//******************************************************************************
namespace Map2d
{
  
  INLINE
  CMatrix<CRegion*>* CTile::createPixelRegionMatrix()
  {
    CMatrix<CRegion*>* matrix = new CMatrix< CRegion* >(width()+1, height()+1);
    matrix->fill(NULL);
    
    for( CDynamicCoverageAllRegions it( this ); it.cont(); ++it )
      for( CTraversalRegionPixels it2( this, static_cast<CPyramidalRegion*>(*it)); it2.cont(); ++it2)
	matrix->setValue( (*it2).getX(), (*it2).getY(), (*it) );
    
    return matrix;
  }
  
  //------------------------------------------------------------------------------
  INLINE
  CArray* CTile::createLignelDartMatrix()
  {
    CArray* array = new CArray(0, 0, width()+1, height()+1);
    for(CDynamicCoverageAll it( this); it.cont(); ++it)
      array->setDart(*it); //todo, changer le plongement des brins
    
    return array;
  }

  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isPixelInTile(uint x, uint y) const
  {
    return !( x<0 || y<0 || x>=width() || y>=height() );
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isDoubletInTile(const CDoublet & ADoublet) const
  {
    //cas des 4 coins
    
      if( (ADoublet.getX()==xmin() && ADoublet.getY()==ymin()) ||
        (ADoublet.getX()==xmax() && ADoublet.getY()==ymax()) ||
        (ADoublet.getX()==xmin() && ADoublet.getY()==ymax()) ||
        (ADoublet.getX()==xmax() && ADoublet.getY()==ymin()) )
      return false;
    
    // cas des bords
    if(ADoublet.getX()==xmin())
      return ADoublet.getLinel()==XPOS  && ADoublet.getY()<ymax() && ADoublet.getY()>ymin() ;

    if(ADoublet.getY()==ymin())
      return ADoublet.getLinel()==YPOS  && ADoublet.getX()<xmax() && ADoublet.getX()>xmin() ;

    if(ADoublet.getY()==xmax())
      return ADoublet.getLinel()==XNEG  && ADoublet.getY()>ymin() && ADoublet.getY()<ymax() ;

    if(ADoublet.getY()==ymax())
      return ADoublet.getLinel()==YNEG  && ADoublet.getX()>xmin() && ADoublet.getX()<xmax() ;
    
    // inclusion stricte
    return ADoublet.getX()>xmin() && ADoublet.getY()>ymin() && 
      ADoublet.getX()<xmax() && ADoublet.getY()<ymax() ;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isPointelInTile(const CDoublet & ADoublet) const
  {
    return ADoublet.getX()>=xmin() && ADoublet.getY()>=ymin() && 
      ADoublet.getX()<=xmax() && ADoublet.getY()<=ymax() ;
  }
  //------------------------------------------------------------------------------
  INLINE
  bool CTile::isPointelWithinTile(const CDoublet & ADoublet) const
  {
    return ADoublet.getX()>0 && ADoublet.getY()>0 && 
      ADoublet.getX()<width() && ADoublet.getY()<height() ;
  }
  //-----------------------------------------------------------------------------
  INLINE
  bool CTile::samePixelActuLeft(IM_Pixel & APixel, CMatrix<CRegion*>* AMatrix)
  {
    uint x = APixel.x; uint y = APixel.y; 
    uint ratiox = upRatioX(); uint ratioy = upRatioY();
    
    if( y-ymin()>=height() ) return true;
    if( x-xmin()==0 || x-xmin()>=width() ) return false;
    
    uint offsetx = tileUp()->xmin()*ratiox;
    uint offsety = tileUp()->ymin()*ratioy;
    
    CRegion* regionUp1 = AMatrix->getValue( (x-offsetx)/ratiox,   (y-offsety)/ratioy );
    //CRegion* regionUp2 = AMatrix->getValue( (x-1-offsetx)/ratiox, (y-offsety)/ratioy );
    
    CDoublet doublet(x-xmin(),y-ymin(),YPOS);
    //test pour avoir uniquement la projection
    //if(index(2)>1) return !isLCell(doublet);

    if(isLCell(doublet)) return false;

    if(!isRegionToSplit(regionUp1)) return true;
    
    IM_Pixel pix2(APixel.x-1, APixel.y);
    return sameRegions(APixel, pix2);
  }
  //-----------------------------------------------------------------------------
  INLINE
  bool CTile::samePixelActuUp(IM_Pixel & APixel, CMatrix<CRegion*>* AMatrix)
  {
    uint x = APixel.x; uint y = APixel.y; 
    uint ratiox = upRatioX(); uint ratioy = upRatioY();

    if( x-xmin()>=width() ) return true;
    if( y-ymin()==0 || y-ymin()>=height() ) return false;

    uint offsetx = tileUp()->xmin()*ratiox;
    uint offsety = tileUp()->ymin()*ratioy;

    CRegion* regionUp1 = AMatrix->getValue( (x-offsetx)/ratiox, (y-offsety)/ratioy );
    //CRegion* regionUp2 = AMatrix->getValue( (x-offsetx)/ratiox, (y-1-offsety)/ratioy );
    
    CDoublet doublet(x-xmin(),y-ymin(),XPOS);
    //test pour avoir uniquement la projection
    //if(index(2)>1)  return !isLCell(doublet);
    if(isLCell(doublet)) return false;
    
    if(!isRegionToSplit(regionUp1)) return true;

    IM_Pixel pix2(APixel.x, APixel.y-1);
    return sameRegions( APixel, pix2 );
  }
  //-----------------------------------------------------------------------------
  INLINE
    bool CTile::sameRegions(IM_Pixel & APixel1, const IM_Pixel & APixel2)
  { 
    image()->getPixel( APixel1, index(2) );
    //pas besoin de faire de get sur pixel2 puisque déjà fait auparavant
    uint ratiox = upRatioX();  uint ratioy = upRatioY();

    //Critère = même niveau de gris -> pas bon pour les images couleurs  
    //car ne définit pas une partition, ok pour les images en niveau de gris
    //return image()->getPixelGreyValue(APixel1) == image()->getPixelGreyValue(APixel2);
    
    //Critère = classif
    uint offsetx = tileUp()->xmin()*ratiox;
    uint offsety = tileUp()->ymin()*ratioy;

    if(image()->getColorMode()==3)
      {
	uint pos1 = ( (APixel1.x-offsetx) + (width()*ratiox)*(APixel1.y-offsety) ) * 3;
	uint pos2 = ( (APixel2.x-offsetx) + (width()*ratiox)*(APixel2.y-offsety) ) * 3;
	return FClassif[pos1] == FClassif[pos2] &&
	  FClassif[pos1+1] == FClassif[pos2+1] &&
	  FClassif[pos1+2] == FClassif[pos2+2];
      }
    if( image()->getColorMode() == 1)
      {
	uint pos1 = ( (APixel1.x-offsetx) + (width()*ratiox)*(APixel1.y-offsety) );
	uint pos2 = ( (APixel2.x-offsetx) + (width()*ratiox)*(APixel2.y-offsety) );
	return FClassif[pos1] == FClassif[pos2];
      }
    return false;
  }

  //-----------------------------------------------------------------------------
  INLINE
  CDart* CTile::createSquareFace(CDart* ALast, CDart* AUp, CDoublet& ADoublet,
				 CRegion* ARegion, CArray* AArray)
  {
    assert(AArray!=NULL);
    uint ratiox = upRatioX(); uint ratioy = upRatioY();
    CDoublet doublet(ADoublet);

    uint offsetx = xmin() - tileUp()->xmin()*ratiox;
    uint offsety = ymin() - tileUp()->ymin()*ratioy;
    CDoublet upDoublet((doublet.getX()+offsetx)/ratiox, (doublet.getY()+offsety)/ratioy, doublet.getLinel());

    //std::cout<<" 1. doublet = "<<doublet<<std::endl;
    CPyramidalDart* first  = static_cast<CPyramidalDart*>(addMapDart(ADoublet, ARegion));
    CPyramidalDart* prev   = first;
    CPyramidalDart* actu   = NULL;
    CPyramidalDart* upDart = static_cast<CPyramidalDart*>(AArray->getDart(upDoublet)); 

    first->setDartUp(upDart);
    if(upDart!=NULL )
	upDart->setDartDown(first);
    
    for(uint i=0; i<3; ++i)
      {
	doublet.setNextPointel();
	doublet.setNextLinel();
	upDoublet.setDoublet((doublet.getX()+offsetx)/ratiox, (doublet.getY()+offsety)/ratioy, doublet.getLinel());
	//std::cout<<i+2<<". doublet = "<<doublet<<std::endl;
	actu = static_cast<CPyramidalDart*>(addMapDart(doublet, ARegion));
	upDart = static_cast<CPyramidalDart*>(AArray->getDart(upDoublet));
	
	actu->setDartUp(upDart);
	if(upDart!=NULL)
	  upDart->setDartDown(actu);
	
	linkBeta1(prev, actu);
	prev = actu;
      }
    linkBeta1(prev, first);
    linkBeta2(prev,  ALast);
    linkBeta2(first, AUp);

    return beta1(first); //retourne le brin last de la face carré
  }

  //-----------------------------------------------------------------------------
  INLINE
  void CTile::linkInfiniteUpDown(CArray* AArray)
  {
    if(!existTileUp()) 
      return;
    
    for( CDynamicCoverage1 it( this, getInclusionTreeRoot()->getRepresentativeDart() ); it.cont(); ++it)
      {
	CPyramidalDart* downDart = 
	  static_cast<CPyramidalDart*>(*it);
	CPyramidalDart* upDart = 
	  static_cast<CPyramidalDart*>(AArray->getDart(getDoublet(*it))); 
	
	downDart->setDartUp(upDart);
	if(upDart!=NULL)
	  upDart->setDartDown(downDart);
      }
  }

//******************************************************************************
}//namespace Map2d
//******************************************************************************
